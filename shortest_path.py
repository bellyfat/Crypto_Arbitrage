from construct_matrix import get_price_matrix
from get_prices import currency_map
import math

currencies = list(currency_map.values())
num_currencies = len(currencies)
edges = list(filter(lambda x: x[0] != x[1], [(i, j) for i in range(num_currencies) for j in range(num_currencies)]))


'''
Run the floyd-warshall algorithm until k=3
and then from d[k][n] + w[n][source] < 0 then you have an arb
backtrack from n to source and you have your path



'''

def get_arb_path(m, source, k=3):
    dist = [[math.inf for i in range(num_currencies)] for j in range(k+1)]
    prev = [[0 for i in range(num_currencies)] for j in range(k+1)]
    for i in range(num_currencies):
        dist[1][i] = m[source][i]
        prev[1][i] = source

    for p in range(2, k+1):
        for n in range(num_currencies):
            for j in range(num_currencies):
                #print('p: {}, j: {}, n: {}'.format(p, n, j))
                if dist[p][n] > dist[p-1][j] + m[j][n]:
                    prev[p][n] = j
                    dist[p][n] = dist[p-1][j] + m[j][n]

    for n in range(num_currencies):
        if dist[k][n] + m[n][source] < 0:
            print('arb found! from {} -> {} -> {} -> {} :)'.format(source, prev[n], n, source))
            return True
    return False


# p_matrix = [
#     [0.0, -8.117303471064279, -8.270480404491293, -3.044834475487632, -9.984962554890547],
#     [8.130999519044419, 0.0, -0.13957946324574988, 5.085871224023992, -1.9335650082803597],
#     [8.276588054512281, 0.15160179303503057, 0.0, 5.231459747772044, -1.7879797772737522],
#     [3.051151346601197, -5.0734720207738135, -5.219422999949481, 0.0, -7.009524532500394],
#     [10.070601452102458, 1.9456135544230986, 1.800022444965228, 7.0254730830160135, 0.0]
# ]
# p_matrix = get_price_matrix()
# #p_matrix = [[0.0, -8.117303471064279, -8.270346443520234, -3.044834475487632, -9.984962554890547, -6.047135568113919, -6.566980766433973], [8.130999519044419, 0.0, -0.13944549566145836, 5.085871224023992, -1.9335650082803597, 2.0434763942408107, 1.5590036879006794], [8.276454086927725, 0.15146782571340964, 0.0, 5.231325780197506, -1.7881137420333946, 2.1889293198252795, 1.7044580554425715], [3.051151346601197, -5.0734720207738135, -5.219289032676199, 0.0, -7.009524532500394, -3.03443559634913, -3.5206080917794216], [10.070601452102458, 1.9456135544230986, 1.8001564125511864, 7.0254730830160135, 0.0, 3.983067939490763, 3.4986043537714613], [6.093637615695671, -2.0313331957765293, -2.176807205457437, 3.0485098976706957, -3.9707642382240644, 0.0, -0.47834834374899715], [6.5780133437793555, -1.5469641526593978, -1.6924315628223197, 3.532885371025763, -3.4864603230042013, 0.49053541586497856, 0.0]]
# print('p_matrix: {}'.format(p_matrix))
# get_arb_path(p_matrix, 0)

    


#[[0.0, -8.117303471064279, -8.270346443520234, -3.044834475487632, -9.984962554890547, -6.047135568113919, -6.566980766433973], [8.130999519044419, 0.0, -0.13944549566145836, 5.085871224023992, -1.9335650082803597, 2.0434763942408107, 1.5590036879006794], [8.276454086927725, 0.15146782571340964, 0.0, 5.231325780197506, -1.7881137420333946, 2.1889293198252795, 1.7044580554425715], [3.051151346601197, -5.0734720207738135, -5.219289032676199, 0.0, -7.009524532500394, -3.03443559634913, -3.5206080917794216], [10.070601452102458, 1.9456135544230986, 1.8001564125511864, 7.0254730830160135, 0.0, 3.983067939490763, 3.4986043537714613], [6.093637615695671, -2.0313331957765293, -2.176807205457437, 3.0485098976706957, -3.9707642382240644, 0.0, -0.47834834374899715], [6.5780133437793555, -1.5469641526593978, -1.6924315628223197, 3.532885371025763, -3.4864603230042013, 0.49053541586497856, 0.0]]